{"version":3,"sources":["App.js","Messages.js","Input.js","serviceWorker.js","index.js"],"names":["socket","Messages","_this","this","messages","props","react_default","a","createElement","id","className","map","m","i","renderMessage","message","index","member","text","currentMember","key","style","backgroundColor","split","Fragment","dangerouslySetInnerHTML","__html","length","Component","Input","state","e","setState","target","value","preventDefault","onSendMessage","_this2","onSubmit","onChange","type","placeholder","autoFocus","URLSearchParams","window","location","search","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","sendMessage","isMobilePresent","bind","assertThisInitialized","username","Date","getTime","socketIOClient","on","msg","push","replace","url","urlify","setTimeout","elem","document","getElementById","scrollTop","scrollHeight","emit","from","src_Messages","src_Input","Boolean","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8eb7ebe1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Messages from \"./Messages\";\nimport Input from \"./Input\";\nimport socketIOClient from \"socket.io-client\";\nlet socket;\nvar urlParams = new URLSearchParams(window.location.search);\n\nclass App extends Component {\n\n  componentDidMount(){\n    // if(!urlParams.get('mobile') && !urlParams.get('bid')){\n    //   return;\n    // }\n\n    // fetch('http://localhost:3000/conversation?mobile='+urlParams.get('mobile'))\n    //   .then(resp=>resp.json())\n    //   .then(data=>{\n\t\t// data.forEach(element => {\n\t\t// \telement.text = urlify(element.text)\n\t\t//   });\n\t\t//   console.log(data)\n\t\t// this.setState({\n\t\t//   messages: data\n\t\t// })\n\t\t// window.setTimeout(function() {\n\t\t// \tlet elem = document.getElementById('message-box');\n\t\t// \telem.scrollTop = elem.scrollHeight;\n\t\t//   }, 500);\n    //   })\n    window.username = new Date().getTime();\n    socket = socketIOClient('/')\n    socket.on(\"chat-message\", (msg)=>{\n      this.state.messages.push({\n        text: urlify(msg),\n        member: 'bot'\n      });\n      this.setState({\n        isMobilePresent: true,\n        messages: this.state.messages\n      });\n      window.setTimeout(function() {\n        let elem = document.getElementById('message-box');\n        elem.scrollTop = elem.scrollHeight;\n      }, 300);\n    })\n\n  }\n\n  sendMessage(message){\n    this.state.messages.push({\n      text: message,\n      member: 'user'\n    });\n    window.setTimeout(function() {\n      var elem = document.getElementById('message-box');\n      elem.scrollTop = elem.scrollHeight;\n    }, 300);\n    this.setState({\n      messages: this.state.messages\n    })\n    socket.emit('chat-message', {from: window.username, text: message})\n  }\n\n  constructor() {\n    super();\n    this.state = {\n      messages: [],\n      isMobilePresent: false\n    }\n    this.sendMessage = this.sendMessage.bind(this);\n  }\n\n  render() {\n    if(!this.state.messages){\n      return <h3>Please Wait</h3>\n    }\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <h1>ChatBot</h1>\n        </div>\n        <Messages\n          messages={this.state.messages}\n          currentMember={this.state.member}\n        />\n        <Input\n          onSendMessage={this.onSendMessage}\n        />\n      </div>\n    );\n  }\n\n  onSendMessage = (message) => {\n    if(!message){\n      return;\n    }\n    this.sendMessage(message);\n  }\n\n}\n\nfunction urlify(text) {\n\tif(!text){\n\t\treturn text;\n\t}\n    let urlRegex = /(http?:\\/\\/[^\\s]+)/g;\n\n    // if(text.indexOf(\"#http\") != -1){\n    //   let miniRegex = /(#http?:\\/\\/[^\\s]+)/g;\n    //   let i = text.indexOf(\"#http\");\n    //   let spChar = text[i-1]\n    //   let label = getCharMeaning(spChar)\n    //   // text[i-1] = '';\n    //   text = text.replace(/[PCSK]#http/,'#http')\n    //   text = text.replace(miniRegex, function(url){\n    //     return '<a href=\"' + url + '\" target=\"_blank\">' + label + '</a>';\n    //   })\n    // }\n    return text.replace(urlRegex, function(url) {\n        return '<a href=\"' + url + '\" target=\"_blank\">' + url.replace(/http:\\/\\/localhost:3000\\//g, '') + '</a>';\n    })\n    // or alternatively\n    // return text.replace(urlRegex, '<a href=\"$1\">$1</a>')\n}\n\nfunction getCharMeaning(character){\n  switch (character) {\n    case 'P': \n      return 'pause';\n    case 'C': \n      return 'continue';\n    case 'S': \n      return 'status';\n    case 'K': \n      return 'kill';\n    default:\n       return '';\n  }\n}\n\nexport default App;\n","import {Component} from \"react\";\nimport React from \"react\";\n\nclass Messages extends Component {\n  render() {\n    const {messages} = this.props;\n    return (\n      <ul id=\"message-box\" className=\"Messages-list\">\n        {messages.map((m,i) => this.renderMessage(m, i))}\n      </ul>\n    );\n  }\n\n  renderMessage(message, index) {\n    const {member, text} = message;\n    const {currentMember} = this.props;\n    const messageFromMe = member === 'user';\n    const className = messageFromMe ?\n      \"Messages-message currentMember\" : \"Messages-message\";\n    return (\n      <li key={index} className={className}>\n      <span\n        className=\"avatar\"\n        style={{backgroundColor: member === 'user' ? 'green' : 'orange'}}\n      />\n        <div className=\"Message-content\">\n          <div className=\"username\">\n            {member}\n          </div>\n          <div className=\"text\">\n            {text && text.split(\"\\n\").map((i,key) => {\n              return <React.Fragment><div key={key} dangerouslySetInnerHTML={{ __html: i }}></div>{key+1 == text.split(\"\\n\").length ? \"\": <br/>}</React.Fragment>\n            })}\n          </div>\n        </div>\n      </li>\n    );\n  }\n}\n\nexport default Messages;\n","import {Component} from \"react\";\nimport React from \"react\";\n\nclass Input extends Component {\n  state = {\n    text: \"\"\n  }\n\n  onChange(e) {\n    this.setState({text: e.target.value});\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n    this.setState({text: \"\"});\n    this.props.onSendMessage(this.state.text);\n  }\n\n  render() {\n    return (\n      <div className=\"Input\">\n        <form onSubmit={e => this.onSubmit(e)}>\n          <input\n            onChange={e => this.onChange(e)}\n            value={this.state.text}\n            type=\"text\"\n            placeholder=\"Enter your message and press ENTER\"\n            autoFocus={true}\n          />\n          <button>Send</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Input;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}